# War Game
#The deck is divided evenly,with each player receiving 26 cards,dealt one at a time, 
#face down.Anyone may deal first.Each player places his stack of cards face down 
#in front of him.
#
#THE PLAY:
#Each player turns up the card at the same time and the player with the higher card
#takes both cards and put them,face down,on the bottom of his stack.
#If the cards are the same rank,it is the war.Each player turns up three cards face
#down and one card face up.The player with the higher cards takes both piles(6 cards).
#If the turned up cards are again the same rank,each player places another card face
#down and another card face up.The player with the higher card takes al 10 cards,and 
#so on. Ignore "double" wars.

from random import shuffle
# Two useful variables for creating cards.
SUITE ='H D S C'.split()
RANKS= '2 3 4 5 6 7 8 9 10 J Q K A'.split()

 
class Deck:
    """
    This is the deck class
    """
    def __init__(self):
        print("Creating New Ordered Deck!")
        self.allcards =[(s,r) for s in SUITE for r in RANKS]
    def shuffle(self): 
        print("Shuffling deck")
        shuffle(self.allcards)
    def split_in_half(self):  
        return (self.allcards[:26],self.allcards[26:])
    
    
class Hand:   
    """
    This is the hand class.Each player has a hand and can add or remove
    cars from that hand
    """
    def __init__(self,cards):
        self.cards=cards
    def __str__(self):
        return "Contains {} cards".format(len(self.cards))
    def add(self,added_cards):
        self.cards.extend(added_cards)
    def remove_card(self):
        return self.cards.pop()
    
    
class Player:  
    """
    This is the player class.The player can then play cards 
    and check if they still have cards
    """
    def __init__(self,name,hand):
        self.name =name
        self.hand = hand
    def play_card(self):
        drawn_card=self.hand.remove_card()
        print("{} has placed:{}".format(self.name,drawn_card))
        print("\n")
        return drawn_card
    def remove_war_cards(self):
        war_cards=[]
        if len(self.hand.cards)<3:
            return self.hand.cards
        else:
            for x in range(3):
                war_cards.append(self.hand.remove_card())
        return war_cards  
    def still_has_cards(self):
        """
        Return True if player still has cards left
        """
        return len(self.hand.cards)!=0
    
    
##################GAME PLAY######################
print("Welcome to WAR,let's begin...")

#Create a new deck and split it in half:
d =Deck()
d.shuffle()
half1,half2=d.split_in_half()

#Create both players!
comp=Player("computer",Hand(half1))
name=input("What is your name?")
user =Player(name,Hand(half2))

total_rounds =0
war_count=0
while user.still_has_cards() and comp.still_has_cards():
    total_rounds+=1
    print("Time for the new round!")
    print("Here are the current standings")
    print(user.name+"has the count: "+str(len(user.hand.cards)))
    print(comp.name+"has the count: "+str(len(comp.hand.cards)))
    print("Play a card")
    print('\n')
     
    table_cards=[]
     
    c_card=comp.play_card()
    p_card=user.play_card()      
    table_cards.append(c_card)
    table_cards.append(p_card)  
          
          
    if c_card[1]==p_card[1]:
        war_count+=1
        print("WAR!")
        table_cards.extend(user.remove_war_cards())
        table_cards.extend(comp.remove_war_cards())
        if (RANKS.index(c_card[1]) < RANKS.index(p_card[1])):
            user.hand.add(table_cards)
        else:
            comp.hand.add(table_cards)
         
    else:
        if (RANKS.index(c_card[1]) < RANKS.index(p_card[1])):
            user.hand.add(table_cards)
        else:
            comp.hand.add(table_cards)
           
          
print("GAME OVER,Number of round: "+str(total_rounds))
print("A war happened "+str(war_count)+" times")          
print("Does the computer still have cards? ")
print(str(comp.still_has_cards()))
print("Does the user still have cards? ")
print(str(user.still_has_cards()))
          
